plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    mavenCentral()
}

description 'ICEpdf FX viewer reference implementation project'

mainClassName = "org.icepdf.fx.ri.viewer.Launcher"
applicationDefaultJvmArgs = ["-Xms64m", "-Xmx1024m"]

def sectionName = 'org/icepdf/fx/ri/viewer'
def baseJarName = 'icepdf'
def baseAppendixName  = 'viewer-fx'
def commandlineArgs = '-loadfile "/home/pcorless/dev/pdf-qa/PDF32000_2008.pdf"'

repositories {
    mavenCentral()
    jcenter()
}

javafx {
    version = "21.0.5"
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.swing' ]
}


dependencies {
    implementation project(':core:core-awt')
    // signature validation.
    implementation 'org.bouncycastle:bcprov-jdk18on:' + "${BOUNCY_VERSION}"
    implementation 'org.bouncycastle:bcpkix-jdk18on:' + "${BOUNCY_VERSION}"
    // drawing tests
    implementation 'org.jfree:org.jfree.fxgraphics2d:2.1'
    // tests
    testImplementation(platform("org.junit:junit-bom:${JUNIT_BOM_VERSION}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

// generatePomFileForViewerJarPublication
publishing {
    publications {
        viewerJar(MavenPublication) {
            from components.java
            afterEvaluate {
                groupId 'org.icepdf.os'
                artifactId 'icepdf-viewer-fx'
                version "${VERSION + (RELEASE_TYPE?.trim() ? '-' + RELEASE_TYPE : '')}"
                pom.withXml {
                    asNode().appendNode('description', 'ICEpdf JX Viewer reference implementation.')
                    asNode().appendNode('url', 'https://github.com/pcorless/icepdf')
                    asNode().appendNode('scm')
                            .appendNode('connection', 'scm:git:https://github.com/pcorless/icepdf').parent()
                            .appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.txt').parent()
                            .appendNode('tag', 'icepdf-' + version + '-maven')
                    asNode().appendNode('licenses').appendNode('license')
                            .appendNode('name', 'Apache License, Version 2.0').parent()
                            .appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.html').parent()
                            .appendNode('distribution', 'repo')
                }
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jar {
    archiveBaseName.set('icepdf')
    archiveAppendix.set("viewer-fx")
    archiveVersion.set("${VERSION}")
    archiveClassifier.set("${RELEASE_TYPE}")

    doFirst {
        manifest {
            attributes ('Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')')
            // executable jar
            attributes("Main-Class": 'org.icepdf.ri.viewer.Launcher')
            if (!configurations.runtimeClasspath.isEmpty()) {
                attributes('Class-Path': configurations.runtimeClasspath.files.collect{it.name}.join(' '))
            }
        }
    }

    manifest {
        // section names attributes
        attributes("Implementation-Title": "${archiveBaseName.get() + '-' + archiveAppendix.get()}", "${sectionName}")
        attributes("Implementation-Version": "${VERSION + (RELEASE_TYPE?.trim()? '-' + RELEASE_TYPE:'')}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Assembles a jar archive containing the main classes source code.'
    group = 'Documentation'
    archiveBaseName.set("${baseJarName}")
    archiveAppendix.set("${baseAppendixName}")
    archiveVersion.set("${VERSION}")
    archiveClassifier.set("sources")
    manifest {
        attributes("Implementation-Title": "${archiveBaseName.get() + '-' + archiveAppendix.get()}", "${sectionName}")
        attributes("Implementation-Version": "${VERSION + (RELEASE_TYPE?.trim()? '-' + RELEASE_TYPE:'')}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc
    archiveClassifier.set("javadoc")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
